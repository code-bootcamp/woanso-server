input {
    jdbc {
        jdbc_driver_library => '/usr/share/logstash/mysql-connector-java-8.0.28.jar' #자바 통해서 연결해야함
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_connection_string => "jdbc:mysql://my-database:3306/woanso"
        jdbc_user => "root"
        jdbc_password => "root"
        schedule => "* * * * *"  #리프레시 간격, 이대로 하면 매 분 리프레시함
        use_column_value => "true"  #이하 column의 value를 사용하겠다
        tracking_column => "updatedat"
        tracking_column_type => "numeric"
        last_run_metadata_path => "./aaa.txt"  #저장되는 텍스트 파일
        statement => "select *, unix_timestamp(updatedat) as updatedat from user where unix_timestamp(updatedat) > :sql_last_value order by updatedat asc"
        #"select nickname, email, unix_timestamp(updatedat) as updatedat from user unix_timestamp(updatedat) > :sql_last_value order by updatedat asc"
    }
}

input {
    jdbc {
        jdbc_driver_library => '/usr/share/logstash/mysql-connector-java-8.0.28.jar' #자바 통해서 연결해야함
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_connection_string => "jdbc:mysql://my-database:3306/woanso"
        jdbc_user => "root"
        jdbc_password => "root"
        schedule => "* * * * *"  #리프레시 간격, 이대로 하면 매 분 리프레시함
        use_column_value => "true"  #이하 column의 value를 사용하겠다
        tracking_column => "updatedat"
        tracking_column_type => "numeric"
        last_run_metadata_path => "./bbb.txt"  #저장되는 텍스트 파일
        statement => "select *, unix_timestamp(updatedat) as updatedat from comic where unix_timestamp(updatedat) > :sql_last_value order by updatedat asc"
    
    }
}

output {
    elasticsearch {
        hosts => "elasticsearch:9200"
        index => "user" 
        document_id => "%{[@metadata][_id]}"
        manage_template => true
        template => "/usr/share/logstash/template.json"
        template_name => "post"
        template_overwrite => true
    }
}